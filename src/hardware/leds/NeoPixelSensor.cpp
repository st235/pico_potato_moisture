#include "./NeoPixelSensor.h"

#include <cmath>
#include "pico/stdlib.h"
#include "pico/multicore.h"
#include "hardware/pio.h"
#include "hardware/clocks.h"

// autogenerated header
#include "ws2812.pio.h"

#define DEFAULT_PIO pio0
#define STATE_MACHINE 0
#define WORKING_FREQ 800000
#define IS_32BIT_ALIGNMENT false

namespace {

inline void PutPixel(uint32_t rgb_pixel) {
    pio_sm_put_blocking(DEFAULT_PIO, 0, rgb_pixel << 8u);
}

uint32_t const BLACK_COLOR = 0;

} // namespace

namespace hardware {

namespace neopixel {

uint8_t Pin;

uint32_t LedsCount;
uint32_t StartingLed;
uint32_t ActiveLedsCount;
uint32_t const* Colors;

uint32_t SelectedColor;

void LedsCoreLooper() {
    while (true) {
        for(uint32_t i = 0; i < StartingLed; i++) {
            PutPixel(BLACK_COLOR);
        }

        for(uint32_t i = StartingLed; i < StartingLed + ActiveLedsCount; i++) {
            PutPixel(Colors[SelectedColor - 1]);
        }

        for(uint32_t i = StartingLed + ActiveLedsCount; i < LedsCount; i++) {
            PutPixel(BLACK_COLOR);
        }

        sleep_us(400);
    }
}

void Start(uint8_t pin, uint32_t leds_count, uint32_t starting_led, uint32_t colors[]) {
    uint32_t offset = pio_add_program(DEFAULT_PIO, &ws2812_program);
    ws2812_program_init(DEFAULT_PIO, STATE_MACHINE, offset, pin, WORKING_FREQ, IS_32BIT_ALIGNMENT);

    Pin = pin;
    LedsCount = leds_count;
    StartingLed = starting_led;
    Colors = colors;

    SelectedColor = 0;
    ActiveLedsCount = 0;

    for(int i = 0; i < LedsCount; i++) {
        PutPixel(BLACK_COLOR);
    }

    multicore_launch_core1(LedsCoreLooper);
}

void SetProgress(double progress) {
    uint32_t used_leds = LedsCount - StartingLed;
    uint32_t active_led = used_leds * progress + 0.5 /* round up */;
    SelectedColor = active_led;
    ActiveLedsCount = active_led;
}

}

} // namespace hardware
